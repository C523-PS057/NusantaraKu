pipeline {
    agent any
    environment {
        appPort = 8081
        dockerComposeFile = 'docker-compose.yml'
        serviceName = 'app'
    }
    stages {
        stage('Checkout') {
            steps {
                script{
                    git url: 'https://github.com/C523-PS057/NusantaraKu.git', branch: 'backend'
                }
            }
        }
        stage('Prepare Environment') {
            steps {
                script {
                    def appKey = sh(script: 'php artisan key:generate --show', returnStdout: true).trim()
                    // Fungsi untuk mencari port yang tersedia
                    def findAvailablePort = { startPort ->
                        for (int i = startPort; i < startPort + 100; i++) {
                            if (sh(script: "lsof -Pi :$i -sTCP:LISTEN -t >/dev/null", returnStatus: true) == 1) {
                                return i
                            }
                        }
                        return -1
                    }

                    // Mencari port yang tersedia
                    def availablePort = findAvailablePort(appPort)
                    if (availablePort != -1) {
                        echo "Port $availablePort tersedia. Melanjutkan..."
                        appPort = availablePort
                    } else {
                        error "Tidak dapat menemukan port yang tersedia dalam rentang 8000-8100."
                    }

                    sh 'cp .env.template .env'
                    sh "sed -i 's|!APPKEY|${appKey}|g' .env"
                    
                    sh "sed -i 's|!HOST|${env.DB_HOST}|g' .env"
                    sh "sed -i 's|!PORT|${env.DB_PORT}|g' .env"
                    sh "sed -i 's|!DATABASE|${env.DB_DATABASE}|g' .env"
                    sh "sed -i 's|!USERNAME|${env.DB_USERNAME}|g' .env"
                    sh "sed -i 's|!PASSWORD|${env.DB_PASSWORD}|g' .env"

                    sh "sed -i 's|!MAIL_HOST|${env.MAIL_HOST}|g' .env"
                    sh "sed -i 's|!MAIL_PORT|${env.MAIL_PORT}|g' .env"
                    sh "sed -i 's|!MAIL_USERNAME|${env.MAIL_USERNAME}|g' .env"
                    sh "sed -i 's|!MAIL_PASSWORD|${env.MAIL_PASSWORD}|g' .env"
                    
                    sh "sed -i 's|!GOOGLE_CLIENT_ID|${env.GOOGLE_CLIENT_ID}|g' .env"
                    sh "sed -i 's|!GOOGLE_CLIENT_SECRET|${env.GOOGLE_CLIENT_SECRET}|g' .env"
                    sh "sed -i 's|!GOOGLE_REDIRECT_URI|${env.GOOGLE_REDIRECT_URI}|g' .env"

                }
            }
        }
        stage('Build and Deploy') {
            steps {
                sh(script: "sed -i 's/\\${APP_PORT}/${appPort}/g' ${dockerComposeFile}", returnStatus: true)
                sh 'docker-compose down --volumes --remove-orphans || true'
                sh 'docker-compose up --build -d'
            }
        }
    }
    post {
        always {
            // Fungsi untuk membebaskan port setelah selesai
            script {
                echo "Menjalankan langkah pembersihan..."
                sh(script: "docker-compose -f ${dockerComposeFile} down", returnStatus: true)
                echo "Port ${appPort} dibebaskan kembali."
            }
        }
    }
}
